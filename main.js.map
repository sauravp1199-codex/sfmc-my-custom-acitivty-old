{"version":3,"file":"main.js","mappings":"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","sources":["webpack://sfmc-my-custom-activity/./node_modules/postmonger/postmonger.js","webpack://sfmc-my-custom-activity/webpack/bootstrap","webpack://sfmc-my-custom-activity/./src/index.js"],"sourcesContent":["/*\r\n * Postmonger.js   version 0.0.14\r\n * https://github.com/kevinparkerson/postmonger\r\n *\r\n * Copyright (c) 2012-2014 Kevin Parkerson\r\n * Available via the MIT or new BSD license.\r\n * Further details and documentation:\r\n * http://kevinparkerson.github.com/postmonger/\r\n *\r\n *///\r\n\r\n(function (root, factory) {\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine('postmonger', [], function () { return factory(root); });\r\n\t} else if (typeof exports === 'object') {\r\n\t\tmodule.exports = factory(root);\r\n\t} else {\r\n\t\t// OR use browser globals if AMD is not present\r\n\t\troot.Postmonger = factory(root);\r\n\t}\r\n}(this, function (root) {\r\n\troot = root || window;\r\n\r\n\tvar exports = exports || undefined;\r\n\tvar Postmonger;\r\n\tvar previous = root.Postmonger;\r\n\tvar _window = (root.addEventListener || root.attachEvent) ? root : window;\r\n\tvar Connection, Events, Session;\r\n\r\n\t//Set up Postmonger namespace, provide noConflict support, and version\r\n\tif (typeof(exports) !== 'undefined') {\r\n\t\tPostmonger = exports;\r\n\t} else {\r\n\t\tPostmonger = {};\r\n\t}\r\n\tPostmonger.noConflict = function () {\r\n\t\troot.Postmonger = previous;\r\n\t\treturn this;\r\n\t};\r\n\tPostmonger.version = '0.0.14';\r\n\r\n\t//Create a new Postmonger Connection\r\n\tConnection = Postmonger.Connection = function (options) {\r\n\t\toptions = (typeof(options) === 'object') ? options : {};\r\n\r\n\t\tvar connect = options.connect || _window.parent;\r\n\t\tvar from = options.from || '*';\r\n\t\tvar to = options.to || '*';\r\n\t\tvar self = this;\r\n\r\n\t\t//If string, grab based on id\r\n\t\tif (typeof(connect) === 'string') {\r\n\t\t\tconnect = document.getElementById(connect);\r\n\t\t}\r\n\r\n\t\t//If no connection, check for jquery object\r\n\t\tif (connect && !connect.postMessage && connect.jquery) {\r\n\t\t\tconnect = connect.get(0);\r\n\t\t}\r\n\r\n\t\t//If still no connection, check for iframe\r\n\t\tif (connect && !connect.postMessage && (connect.contentWindow || connect.contentDocument)) {\r\n\t\t\tconnect = connect.contentWindow || connect.contentDocument;\r\n\t\t}\r\n\r\n\t\t//Throw warning if connection could not be made\r\n\t\tif (!(connect && connect.postMessage)) {\r\n\t\t\tif (_window.console && _window.console.warn) {\r\n\t\t\t\t_window.console.warn(' Warning: Postmonger could not establish connection with ', options.connect);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tself.connect = connect;\r\n\t\tself.to = to;\r\n\t\tself.from = from;\r\n\r\n\t\treturn self;\r\n\t};\r\n\r\n\t//Postmonger.Events - Hacked together from Backbone.Events and two Underscore functions.\r\n\tEvents = Postmonger.Events = function () {\r\n\t\tvar eventSplitter = /\\s+/;\r\n\t\tvar self = this;\r\n\r\n\t\tself._callbacks = {};\r\n\r\n\t\tself._has = function (obj, key) {\r\n\t\t\treturn Object.prototype.hasOwnProperty.call(obj, key);\r\n\t\t};\r\n\r\n\t\tself._keys = function (obj) {\r\n\t\t\tif (Object.keys) {\r\n\t\t\t\treturn Object.keys(obj);\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof(obj)!=='object') {\r\n\t\t\t\tthrow new TypeError('Invalid object');\r\n\t\t\t}\r\n\r\n\t\t\tvar keys = [];\r\n\r\n\t\t\tfor (var key in obj) {\r\n\t\t\t\tif (self._has(obj, key)) {\r\n\t\t\t\t\tkeys[keys.length] = key;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn keys;\r\n\t\t};\r\n\r\n\t\tself.on = function (events, callback, context) {\r\n\t\t\tvar calls, event, node, tail, list;\r\n\r\n\t\t\tif (!callback) {\r\n\t\t\t\treturn self;\r\n\t\t\t}\r\n\r\n\t\t\tevents = events.split(eventSplitter);\r\n\r\n\t\t\tself._callbacks = self._callbacks || {};\r\n\t\t\tcalls = self._callbacks;\r\n\r\n\t\t\twhile (event = events.shift()) {\r\n\t\t\t\tlist = calls[event];\r\n\r\n\t\t\t\tnode = (list) ? list.tail : {};\r\n\t\t\t\ttail = {};\r\n\r\n\t\t\t\tnode.next = tail;\r\n\t\t\t\tnode.context = context;\r\n\t\t\t\tnode.callback = callback;\r\n\r\n\t\t\t\tcalls[event] = {\r\n\t\t\t\t\ttail: tail,\r\n\t\t\t\t\tnext: (list) ? list.next : node\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn self;\r\n\t\t};\r\n\r\n\t\tself.off = function (events, callback, context) {\r\n\t\t\tvar calls = self._callbacks;\r\n\t\t\tvar event, node, tail, cb, ctx;\r\n\r\n\t\t\tif (!calls) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!(events || callback || context)) {\r\n\t\t\t\tdelete self._callbacks;\r\n\t\t\t\treturn self;\r\n\t\t\t}\r\n\r\n\t\t\tevents = (events) ? events.split(eventSplitter) : self._keys(calls);\r\n\r\n\t\t\twhile (event = events.shift()) {\r\n\t\t\t\tnode = calls[event];\r\n\t\t\t\tdelete calls[event];\r\n\t\t\t\tif (!node || !(callback || context)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttail = node.tail;\r\n\t\t\t\twhile ((node = node.next) !== tail) {\r\n\t\t\t\t\tcb = node.callback;\r\n\t\t\t\t\tctx = node.context;\r\n\t\t\t\t\tif (((callback && cb) !== callback) || ((context && ctx) !== context)) {\r\n\t\t\t\t\t\tself.on(event, cb, ctx);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn self;\r\n\t\t};\r\n\r\n\t\tself.trigger = function (events) {\r\n\t\t\tvar event, node, calls, tail, args, all, rest;\r\n\r\n\t\t\tif (!(calls = self._callbacks)) {\r\n\t\t\t\treturn self;\r\n\t\t\t}\r\n\r\n\t\t\tall = calls.all;\r\n\t\t\tevents = events.split(eventSplitter);\r\n\t\t\trest = Array.prototype.slice.call(arguments, 1);\r\n\r\n\t\t\twhile (event = events.shift()) {\r\n\t\t\t\tif (node = calls[event]) {\r\n\t\t\t\t\ttail = node.tail;\r\n\t\t\t\t\twhile ((node = node.next) !== tail) {\r\n\t\t\t\t\t\tnode.callback.apply(node.context || self, rest);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (node = all) {\r\n\t\t\t\t\ttail = node.tail;\r\n\t\t\t\t\targs = [event].concat(rest);\r\n\t\t\t\t\twhile ((node = node.next) !== tail) {\r\n\t\t\t\t\t\tnode.callback.apply(node.context || self, args);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn self;\r\n\t\t};\r\n\r\n\t\treturn self;\r\n\t};\r\n\r\n\t//Create a new Postmonger Session\r\n\tSession = Postmonger.Session = function () {\r\n\t\tvar args = (arguments.length>0) ? Array.prototype.slice.call(arguments, 0) : [{}];\r\n\t\tvar connections = [];\r\n\t\tvar incoming = new Events();\r\n\t\tvar outgoing = new Events();\r\n\t\tvar self = this;\r\n\t\tvar connection, i, j, l, ln, postMessageListener;\r\n\r\n\t\t//Session API hooks\r\n\t\tself.on = incoming.on;\r\n\t\tself.off = incoming.off;\r\n\t\tself.trigger = outgoing.trigger;\r\n\t\tself.end = function () {\r\n\t\t\tincoming.off();\r\n\t\t\toutgoing.off();\r\n\t\t\tif (_window.removeEventListener) {\r\n\t\t\t\t_window.removeEventListener('message', postMessageListener, false);\r\n\t\t\t} else if (_window.detachEvent) {\r\n\t\t\t\t_window.detachEvent('onmessage', postMessageListener);\r\n\t\t\t}\r\n\t\t\treturn self;\r\n\t\t};\r\n\r\n\t\t//Establishing connections\r\n\t\tfor (i=0, l=args.length; i<l; i++) {\r\n\t\t\tconnection = new Connection(args[i]);\r\n\t\t\tif (connection) {\r\n\t\t\t\tfor (j=0, ln=connections.length; j<ln; j++) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tconnections[j].connect === connection.connect &&\r\n\t\t\t\t\t\tconnections[j].from === connection.from &&\r\n\t\t\t\t\t\tconnections[j].to === connection.to\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tconnection = null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (connection) {\r\n\t\t\t\t\tconnections.push(connection);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Listener for incoming messages\r\n\t\tpostMessageListener = function(event){\r\n\t\t\tvar conn = null;\r\n\t\t\tvar message = [];\r\n\t\t\tvar data;\r\n\t\t\tvar k, len;\r\n\r\n\t\t\t//Attempt to find the connection we're dealing with\r\n\t\t\tfor (k=0, len=connections.length; k<len; k++) {\r\n\t\t\t\tif (connections[k].connect === event.source) {\r\n\t\t\t\t\tconn = connections[k];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//Check if we've found the connection\r\n\t\t\tif (!conn) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t//Check if the message is from the expected origin\r\n\t\t\tif (conn.from !== '*' && conn.from !== event.origin) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t//Check the data that's been passed\r\n\t\t\ttry{\r\n\t\t\t\tdata = JSON.parse(event.data);\r\n\t\t\t\tif(!data.e){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}catch(e){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t//Format the passed in data\r\n\t\t\tmessage.push(data.e);\r\n\t\t\tdelete data.e;\r\n\t\t\tfor (k in data) {\r\n\t\t\t\tmessage.push(data[k]);\r\n\t\t\t}\r\n\r\n\t\t\t//Send the message\r\n\t\t\tincoming['trigger'].apply(root, message);\r\n\t\t};\r\n\r\n\t\t//Add the listener\r\n\t\tif (_window.addEventListener) {\r\n\t\t\t_window.addEventListener('message', postMessageListener, false);\r\n\t\t} else if(_window.attachEvent) {\r\n\t\t\t_window.attachEvent('onmessage', postMessageListener);\r\n\t\t} else{\r\n\t\t\tif (_window.console && _window.console.warn) {\r\n\t\t\t\t_window.console.warn('WARNING: Postmonger could not listen for messages on window %o', _window);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//Sending outgoing messages\r\n\t\toutgoing.on('all', function () {\r\n\t\t\tvar args = Array.prototype.slice.call(arguments, 0);\r\n\t\t\tvar message = {};\r\n\t\t\tvar k, len;\r\n\r\n\t\t\tmessage.e = args[0];\r\n\r\n\t\t\tfor (k=1, len=args.length; k<len; k++) {\r\n\t\t\t\tmessage['a' + k] = args[k];\r\n\t\t\t}\r\n\r\n\t\t\tfor (k=0, len=connections.length; k<len; k++) {\r\n\t\t\t\tconnections[k].connect.postMessage(JSON.stringify(message), connections[k].to);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn self;\r\n\t};\r\n\r\n\treturn Postmonger;\r\n}));\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// ****************\n// *\n// * \n// [activityName].js\n// *\n// CONTAINS POSTMONGER EVENTS AND SITS IN BETWEEN YOUR CONFIGURATION APP IN THE iFRAME AND JOURNEY BUILDER\n// *\n// *\n// ****************\n\n// Custom activities load inside an iframe. We'll use postmonger to manage\n// the cross-document messaging between journey builder and the activity\nconst Postmonger = require('postmonger')\n\n\n// Creates a new connection for this session.\n// We use this connection to talk to Journey Builder. You'll want to keep this\n// reference handy and pass it into your UI framework if you're using React, Vue, etc.\nconst connection = new Postmonger.Session();\nconst isDev = location.hostname === 'localhost' || location.hostname === '127.0.0.1'\n// We'll store the activity on this variable when we receive it\nlet activity = {};\n\nconst FIELD_DEFINITIONS = [\n  { id: 'campaignName', label: 'Campaign Name', required: true },\n  { id: 'tiny', label: 'Tiny', required: true },\n  { id: 'PE_ID', label: 'PE ID', required: true },\n  { id: 'TEMPLATE_ID', label: 'Template ID', required: true },\n  { id: 'TELEMARKETER_ID', label: 'Telemarketer ID', required: true },\n  { id: 'message', label: 'Message', required: true }\n];\n\n// Wait for the document to load before we do anything\ndocument.addEventListener('DOMContentLoaded', function main() {\n  FIELD_DEFINITIONS.forEach(({ id }) => {\n    const field = document.getElementById(id);\n\n    if (!field) {\n      console.warn(`Field with id \"${id}\" is missing from the DOM.`);\n      return;\n    }\n\n    const eventName = field.tagName === 'SELECT' ? 'change' : 'input';\n    field.addEventListener(eventName, () => {\n      clearFieldError(id);\n      onFormEntry({ target: field });\n    });\n  });\n\n  if (isDev) {\n    console.log('DEV MODE ENABLED - TRIGGERING MOCK JB -> CUSTOM ACTIVITY SIGNAL');\n    setupExampleTestHarness();\n  }\n\n  // Bind the initActivity event...\n  // Journey Builder will respond with 'initActivity' after it receives the \"ready\" signal\n  connection.on('initActivity', onInitActivity);\n  connection.on('clickedNext', onDoneButtonClick);\n\n  // We're all set! let's signal Journey Builder\n  // that we're ready to receive the activity payload...\n  // Tell the parent iFrame that we are ready.\n  connection.trigger('ready');\n  console.log('Journey Builder has been signaled we may receive payload...');\n});\n\n// this function is triggered by Journey Builder via Postmonger.\n// Journey Builder will send us a copy of the activity here\nfunction onInitActivity(payload) {\n  // Set the activity object from this payload. We'll refer to this object as we\n  // modify it before saving.\n  activity = payload || {};\n  console.log(activity);\n\n  const inArguments = activity.arguments &&\n    activity.arguments.execute &&\n    Array.isArray(activity.arguments.execute.inArguments) &&\n    activity.arguments.execute.inArguments.length > 0\n      ? activity.arguments.execute.inArguments\n      : [];\n\n  const mergedArguments = Object.assign({}, ...inArguments);\n\n  FIELD_DEFINITIONS.forEach(({ id }) => {\n    if (Object.prototype.hasOwnProperty.call(mergedArguments, id)) {\n      setFieldValue(id, mergedArguments[id]);\n      clearFieldError(id);\n    }\n  });\n\n  if (activity.metaData && activity.metaData.isConfigured) {\n    return;\n  }\n\n  const hasAllValues = FIELD_DEFINITIONS.every(({ id }) => {\n    const value = mergedArguments[id];\n    return value !== undefined && value !== null && String(value).trim() !== '';\n  });\n\n  if (hasAllValues) {\n    activity.metaData = activity.metaData || {};\n    activity.metaData.isConfigured = true;\n  }\n}\n\nfunction setFieldValue(id, value) {\n  const field = document.getElementById(id);\n\n  if (!field) {\n    return;\n  }\n\n  if (field.tagName === 'SELECT') {\n    field.value = value !== undefined && value !== null ? String(value) : field.value;\n  } else {\n    field.value = value !== undefined && value !== null ? String(value) : '';\n  }\n}\n\nfunction getFieldContainer(id) {\n  return document.querySelector(`[data-field=\"${id}\"]`);\n}\n\nfunction showFieldError(id, message) {\n  const container = getFieldContainer(id);\n\n  if (!container) {\n    return;\n  }\n\n  container.classList.add('slds-has-error');\n\n  const helper = container.querySelector('.error-text');\n\n  if (helper) {\n    helper.textContent = message;\n  }\n}\n\nfunction clearFieldError(id) {\n  const container = getFieldContainer(id);\n\n  if (!container) {\n    return;\n  }\n\n  container.classList.remove('slds-has-error');\n\n  const helper = container.querySelector('.error-text');\n\n  if (helper) {\n    helper.textContent = '';\n  }\n}\n\nfunction getFieldValue(field) {\n  if (!field) {\n    return '';\n  }\n\n  if (field.tagName === 'SELECT') {\n    return field.value;\n  }\n\n  return typeof field.value === 'string' ? field.value.trim() : field.value;\n}\n\nfunction onDoneButtonClick() {\n  const fieldPayload = {};\n  let hasErrors = false;\n\n  FIELD_DEFINITIONS.forEach(({ id, label, required }) => {\n    const field = document.getElementById(id);\n\n    if (!field) {\n      return;\n    }\n\n    const value = getFieldValue(field);\n\n    if (required && (value === undefined || value === null || value === '')) {\n      showFieldError(id, `${label} is required.`);\n      hasErrors = true;\n      return;\n    }\n\n    fieldPayload[id] = field.tagName === 'SELECT' ? value : value;\n  });\n\n  if (hasErrors) {\n    return;\n  }\n\n  // we must set metaData.isConfigured in order to tell JB that this activity\n  // is ready for activation\n  activity.metaData = activity.metaData || {};\n  activity.metaData.isConfigured = true;\n\n  activity.arguments = activity.arguments || {};\n  activity.arguments.execute = activity.arguments.execute || {};\n  activity.arguments.execute.inArguments = [fieldPayload];\n\n  connection.trigger('updateActivity', activity);\n  console.log(`Activity has been updated. Activity: ${JSON.stringify(activity)}`);\n}\n\nfunction onCancelButtonClick() {\n  // tell Journey Builder that this activity has no changes.\n  // we won't be prompted to save changes when the inspector closes\n  connection.trigger('setActivityDirtyState', false);\n\n  // now request that Journey Builder closes the inspector/drawer\n  connection.trigger('requestInspectorClose');\n}\n\n// HANDLER TO DISABLE \"DONE\" BUTTON - SAMPLE BELOW\nfunction onFormEntry(e) {\n  if (!e || !e.target) {\n    return;\n  }\n\n  const value = getFieldValue(e.target);\n\n  if (value && value.length > 0) {\n    // let journey builder know the activity has changes\n    connection.trigger('setActivityDirtyState', true);\n  }\n}\n\n\n// this function is for example purposes only. it sets ups a Postmonger\n// session that emulates how Journey Builder works. You can call jb.ready()\n// from the console to kick off the initActivity event with a mock activity object\nfunction setupExampleTestHarness() {\n\n  const jbSession = new Postmonger.Session();\n  const jb = {};\n  window.jb = jb;\n\n  jbSession.on('setActivityDirtyState', function(value) {\n      console.log('[echo] setActivityDirtyState -> ', value);\n  });\n\n  jbSession.on('requestInspectorClose', function() {\n      console.log('[echo] requestInspectorClose');\n  });\n\n  jbSession.on('updateActivity', function(activity) {\n      console.log('[echo] updateActivity -> ', JSON.stringify(activity, null, 4));\n  });\n\n  jbSession.on('ready', function() {\n      console.log('[echo] ready');\n      console.log('\\tuse jb.ready() from the console to initialize your activity')\n  });\n\n  jb.save = () => {\n    onDoneButtonClick()\n  }\n\n  // fire the ready signal with an example activity\n  jb.ready = () => {\n      jbSession.trigger('initActivity', {\n        name: '',\n        key: 'EXAMPLE-1',\n        metaData: {},\n        configurationArguments: {},\n        arguments: {\n            executionMode: \"{{Context.ExecutionMode}}\",\n            definitionId: \"{{Context.DefinitionId}}\",\n            activityId: \"{{Activity.Id}}\",\n            contactKey: \"{{Context.ContactKey}}\",\n            execute: {\n                inArguments: [\n                  {\n                    campaignName: 'Sample Campaign',\n                    tiny: '1',\n                    PE_ID: '12345',\n                    TEMPLATE_ID: '67890',\n                    TELEMARKETER_ID: 'TM-001',\n                    message: 'Sample SMS body'\n                  }\n                ],\n                outArguments: []\n            },\n            startActivityKey: \"{{Context.StartActivityKey}}\",\n            definitionInstanceId: \"{{Context.DefinitionInstanceId}}\",\n            requestObjectId: \"{{Context.RequestObjectId}}\"\n        }\n      });\n  };\n}"],"names":["root","this","Postmonger","Connection","Events","exports","undefined","previous","window","_window","addEventListener","attachEvent","noConflict","version","options","connect","parent","from","to","self","document","getElementById","postMessage","jquery","get","contentWindow","contentDocument","console","warn","eventSplitter","_callbacks","_has","obj","key","Object","prototype","hasOwnProperty","call","_keys","keys","TypeError","length","on","events","callback","context","calls","event","node","tail","list","split","shift","next","off","cb","ctx","trigger","args","all","rest","Array","slice","arguments","apply","concat","Session","connection","i","j","l","ln","postMessageListener","connections","incoming","outgoing","end","removeEventListener","detachEvent","push","data","k","len","conn","message","source","origin","JSON","parse","e","stringify","factory","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","isDev","location","hostname","activity","FIELD_DEFINITIONS","id","label","required","onInitActivity","payload","log","inArguments","execute","isArray","mergedArguments","assign","forEach","value","field","tagName","String","setFieldValue","clearFieldError","metaData","isConfigured","every","trim","getFieldContainer","querySelector","container","classList","remove","helper","textContent","getFieldValue","onDoneButtonClick","fieldPayload","hasErrors","add","showFieldError","eventName","target","onFormEntry","jbSession","jb","save","ready","name","configurationArguments","executionMode","definitionId","activityId","contactKey","campaignName","tiny","PE_ID","TEMPLATE_ID","TELEMARKETER_ID","outArguments","startActivityKey","definitionInstanceId","requestObjectId","setupExampleTestHarness"],"sourceRoot":""}